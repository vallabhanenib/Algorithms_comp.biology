# -*- coding: utf-8 -*-
"""Hw02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ipYMtueD1HSwGPgDePbaZR895D8HrZB4

Part I: Warm-up alignment table

Question:1
"""

import pandas as pd

# create a DataFrame
table = {'Row 0' : [1,1,1], 'Row 1' : [2,2,2],'Row 2' : [3,3,3]}
df = pd.DataFrame(table)
df=df.T  
# displaying the DataFrame
df.style

from tabulate import tabulate
data = [[1,1,1], 
        [2,2,2], 
        [3,3,3]]

  
#display table
print(tabulate(data))

"""question 2:

for loop to print out the elements in the variable
"""

for i, j in table.items():
  print(i,j)

"""Question 3:

code to change first row to [-1, -1, -1]
"""

table.update({"Row 0":[-1,-1,-1]})
print("Updated table")
for i,j in table.items():
  print(i,j)

"""Question 4:

code to change first column to [-1, -1, -1]
"""

table.update({"Row 1":[-1,2,2]})
table.update({"Row 2":[-1,3,3]})
print("Updated table")
for i,j in table.items():
  print(i,j)

"""Question 5:

python function to create an alignment table with all values equal to 0
"""

from tabulate import tabulate
def alignment_table(sequence1,sequence2):
  print('sequence 1: ', sequence1 ,'with length of ', len(sequence1))
  print('sequence 2: ', sequence2 ,'with length of ', len(sequence2))
  print('The initial table dimension 10 and 8 for the sequence alignment is:')
  table= [[0,0,0,0,0,0,0,0,0,0] for i in range(len(sequence2)+1)]
  print(tabulate(table))

alignment_table('AATTATATT', 'ACGTTAT')

"""Question 6:

initialize the first row and first column
"""

def alignment_table(sequence1,sequence2):
  m = len(sequence1)
  n = len(sequence2)
  table = []
  for i in range(m +1):
    sub = []
    for j in range(n +1):
      sub.append(0)
    table.append(sub)
  for j in range(1,n+1):
    table[0][j] = table[0][j-1]-1

  for i in range(1,m+1):
    table[i][0]= table[i-1][0]-1
  return table


print('The updated table with dimension 10 and 8 for the sequence alignment is: ')
alignment_table('AATTATATT', 'ACGTTAT')

"""Part II: Advancing alignment table computing for global alignment"""

def buildNWTable(X, Y, match= 1, mismatch= -1, gap=-1):
  print('sequence 1: ', X)
  print('sequence 2: ', Y)
  opt= alignment_table(X, Y)
  print("The initial alignment table is: ", '\n')
  print(tabulate(opt))
  for i in range(1,len(X)+1):
    for j in range(1,len(Y)+1):
      if X[i-1] == Y[j-1]:
        case1 = opt[i-1][j-1]+ match
      else:
        case1 = opt[i-1][j-1]+ mismatch
      case2 = opt[i-1][j]+ gap
      case3 = opt[i][j-1]+ gap
      opt[i][j] = max([case1, case2, case3])
  print("The final alignment table is: ", '\n')
  return opt

X = 'ACATGTGA'
Y = 'AAGGA'
buildNWTable(X,Y)

"""Part III: Reconstructing the optimal alignment"""

def NWTraceBack(X, Y, match=1, mismatch=-1, gap=-1):
  first = ""        # alignment for X
  second = ""       # alignment for Y
  score = 0
  table = buildNWTable(X,Y)
  print(tabulate(table))
  col_start = len(Y)
  row_start = len(X)
  while col_start>0 or row_start>0:
    if X[row_start-1] == Y[col_start-1]:
      case1 = table[row_start-1][col_start-1]+ match
    else:
      case1 = table[row_start-1][col_start-1]+ mismatch
    case2 = table[row_start-1][col_start]+ gap
    case3 = table[row_start][col_start-1]+ gap
    if case1 == table[row_start][col_start]:
      first += X[row_start-1]
      second += Y[col_start-1]
      row_start -=1
      col_start -=1

    elif case2 == table[row_start][col_start]:
      first += X[row_start-1]
      second += '-'
      row_start -=1
    elif case3 == table[row_start][col_start]:
      first += '-'
      second += Y[col_start-1]
      col_start -=1
  first = first[::-1]
  second = second[::-1]
  for i in range(len(first)):
    if first[i] == second[i]:
      score +=1
    else:
      score += -1
  print("The score of optimal alignment is: ", score, '\n')
  return first,second


X = 'ACATGTGA'
Y = 'AAGGA'
seq1,seq2 = NWTraceBack(X,Y)
print('The best alignment is: ')
print(*seq1)
print(*seq2)